<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

  <display-name>newproject</display-name>
  <!--定义访问的首页,如果配置了多个的话,服务器会按照定义的顺序来进行选择访问-->
  <welcome-file-list>
    <welcome-file>test.html</welcome-file>
  </welcome-file-list>

  <jsp-config>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/core</taglib-uri>
      <taglib-location>/WEB-INF/c.tld</taglib-location>
    </taglib>
  </jsp-config>

  <servlet-mapping>
    <servlet-name >default </servlet-name >
    <url-pattern >*.js</url-pattern>
    <url-pattern >*.css</url-pattern>
    <url-pattern >*.html</url-pattern>
    <url-pattern >*.jsp</url-pattern>
  </servlet-mapping >

  <!--全局范围内环境参数初始化 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-mybatis.xml</param-value>
  </context-param>

  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
  </context-param>

  <!-- 编码过滤器 
       用来声明filter的相关设定,过滤器可以截取和修改一个servlet或者jsp页面发出的响应
  -->
  <filter>
    <filter-name>encodingFilter</filter-name>  <!--指定filter的名字-->
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>  <!--用来定义filter对应的URL-->
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- spring监听器 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- 防止spring内存溢出监听器，比如quartz -->
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>


  <!-- spring mvc servlet-->
  <servlet>
    <servlet-name>SpringMVC</servlet-name>
    <!--配置了前端控制器-->
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--初始化参数-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <!--当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet.-->
    <load-on-startup>1</load-on-startup>
    <!--设置是否启用异步支持-->
    <async-supported>true</async-supported>
  </servlet>
  <!--用来定义servlet所对应的URL-->
  <servlet-mapping>
    <servlet-name>SpringMVC</servlet-name>
    <!-- 此处也可以配置成 *.do 形式 -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <servlet>
    <servlet-name>Kaptcha</servlet-name>
    <servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>Kaptcha</servlet-name>
    <url-pattern>/Kaptcha.jpg</url-pattern>
  </servlet-mapping>

  <!-- session配置   会话超时设置 -->
  <session-config>
    <!--如果某个会话在一定时间未被访问，则服务器可以扔掉以节约内存-->
    <session-timeout>15</session-timeout>
  </session-config>
  
  <!--配置错误页面   将错误代码或者错误类型对应到web的资源路径
  <error-page>
    <error-code>404</error-code>
    <location>/404.html</location>
  </error-page>
  
  <error-page>
    <exception-type>java.lang.NullPointerException</exception-type>
    <location>/nullpointexception.html</location>
  </error-page>
  -->
</web-app>
